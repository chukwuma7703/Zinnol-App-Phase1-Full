name: Load Testing - Zinnol App

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Test duration in seconds'
        required: false
        default: '60'
        type: string
      virtual_users:
        description: 'Number of virtual users'
        required: false
        default: '10'
        type: string
      target_url:
        description: 'Target URL for testing'
        required: false
        default: 'http://localhost:5000'
        type: string
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

permissions:
  contents: read

jobs:
  load-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install Artillery (load testing tool)
        run: npm install -g artillery@latest

      - name: Install k6 (alternative load testing tool)
        run: |
          wget -q -O - https://dl.k6.io/key.gpg | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y k6

      - name: Create load test configuration
        working-directory: ./backend
        run: |
          cat > load-test-config.yml << EOF
          config:
            target: "${{ github.event.inputs.target_url || 'http://localhost:5000' }}"
            phases:
              # Warm up phase
              - duration: 30
                arrivalRate: 2
                name: "Warm up"
              # Main load phase
              - duration: ${{ github.event.inputs.duration || 60 }}
                arrivalRate: ${{ github.event.inputs.virtual_users || 10 }}
                name: "Main load"
              # Cool down phase
              - duration: 30
                arrivalRate: 1
                name: "Cool down"
            defaults:
              headers:
                Content-Type: 'application/json'

          scenarios:
            - name: "School Management Load Test"
              weight: 40
              flow:
                - get:
                    url: "/healthz"
                - get:
                    url: "/version"
                - post:
                    url: "/api/auth/login"
                    json:
                      email: "test@example.com"
                      password: "testpass"
                    expect:
                      - statusCode: 200
                    capture:
                      - json: "$.accessToken"
                        as: "token"
                - get:
                    url: "/api/analytics/global-overview"
                    headers:
                      Authorization: "Bearer {{ token }}"
                    expect:
                      - statusCode: 200

            - name: "Student Operations"
              weight: 30
              flow:
                - get:
                    url: "/healthz"
                - post:
                    url: "/api/auth/login"
                    json:
                      email: "student@example.com"
                      password: "studentpass"
                    capture:
                      - json: "$.accessToken"
                        as: "student_token"
                - get:
                    url: "/api/classes"
                    headers:
                      Authorization: "Bearer {{ student_token }}"
                - get:
                    url: "/api/students/me"
                    headers:
                      Authorization: "Bearer {{ student_token }}"

            - name: "Teacher Operations"
              weight: 30
              flow:
                - get:
                    url: "/healthz"
                - post:
                    url: "/api/auth/login"
                    json:
                      email: "teacher@example.com"
                      password: "teacherpass"
                    capture:
                      - json: "$.accessToken"
                        as: "teacher_token"
                - get:
                    url: "/api/assignments"
                    headers:
                      Authorization: "Bearer {{ teacher_token }}"
                - get:
                    url: "/api/results/class/507f1f77bcf86cd799439011"
                    headers:
                      Authorization: "Bearer {{ teacher_token }}"
          EOF

      - name: Start MongoDB
        run: |
          sudo apt-get update
          sudo apt-get install -y mongodb
          sudo systemctl start mongodb || sudo mongod --fork --logpath /var/log/mongodb.log --dbpath /var/lib/mongodb

      - name: Start Redis
        run: |
          sudo apt-get install -y redis-server
          sudo systemctl start redis-server || redis-server --daemonize yes

      - name: Start backend server
        working-directory: ./backend
        run: |
          npm run start &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          sleep 15
          curl -f http://localhost:5000/healthz || (echo "Server failed to start" && exit 1)

      - name: Run k6 load test
        run: |
          cd backend
          BASE_URL=http://localhost:5000 k6 run load-test.k6.js --out json=k6-results.json

      - name: Run Artillery load test
        run: |
          cd backend
          artillery run load-test-config.yml --output artillery-results.json --quiet

      - name: Generate load test report
        run: |
          cd backend
          artillery report load-test-results.json --output load-test-report.html

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results-${{ github.run_id }}
          path: |
            backend/load-test-results.json
            backend/load-test-report.html
            backend/load-test-config.yml
            backend/k6-results.json
            backend/artillery-results.json

      - name: Comment on PR with load test summary
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.target_url != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('./backend/load-test-results.json', 'utf8'));

            const summary = results.aggregate;
            const comment = `
            ## ðŸš€ Load Test Results

            **Test Configuration:**
            - Duration: ${{ github.event.inputs.duration || 60 }}s
            - Virtual Users: ${{ github.event.inputs.virtual_users || 10 }}
            - Target: ${{ github.event.inputs.target_url || 'http://localhost:5000' }}

            **Performance Metrics:**
            - Total Requests: ${summary.requestsCompleted}
            - Request Rate: ${summary.rps.mean}/s
            - Response Time (avg): ${Math.round(summary.latency.mean)}ms
            - Response Time (95th): ${Math.round(summary.latency.p95)}ms
            - Error Rate: ${(summary.errors / summary.requestsCompleted * 100).toFixed(2)}%

            **Status Codes:**
            ${Object.entries(summary.codes).map(([code, count]) => `- ${code}: ${count}`).join('\n')}

            ðŸ“Š [Full Report](./load-test-report.html)
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Cleanup
        if: always()
        run: |
          kill $SERVER_PID || true
          sudo systemctl stop mongodb || true
          sudo systemctl stop redis-server || true
